<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="2" skipped="0" tests="4" time="0.247" timestamp="2022-08-11T15:23:44.918677" hostname="Arishas-MacBook-Pro.local"><testcase classname="tests.test_licenses" name="test_clean_lint_license[tests/good-feedstock-meta.yaml]" time="0.027"><failure message="FileNotFoundError: [Errno 2] No such file or directory: '/Users/arim./codebase/anaconda-tools/conda-lint/conda_lint/linters/data/licenses.txt'">good_metafile = 'tests/good-feedstock-meta.yaml'

    @pytest.mark.parametrize("good_metafile", [
        "tests/good-feedstock-meta.yaml",
        ])
    def test_clean_lint_license(good_metafile):
        s = SBOMLinter()
&gt;       result = s.lint_license(good_metafile)

tests/test_licenses.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = SBOMLinter(prog='pytest', usage=None, description='a linter to validate SPDX license standards', formatter_class=&lt;class 'argparse.HelpFormatter'&gt;, conflict_handler='error', add_help=True)
metafile = 'tests/good-feedstock-meta.yaml'

    def lint_license(self, metafile):
        lints = []
        # Before linting a license, remove jinja from the text if there is any.
        jlint = JinjaLinter()
        args = jlint.parse_args(["-f", f"{metafile}", "--return_yaml"])
    
        jlints, jinja_check = jlint.lint(args)
        lints.extend(jlints)
        meta = jinja_check
    
        about_section = meta.get("about")
        license = about_section.get("license", "")
        license_line = find_location(metafile, "license", license)
        licensing = license_expression.Licensing()
        parsed_exceptions = []
        prelint = f"{metafile}: line {license_line}: "
        try:
            parsed_licenses = []
            parsed_licenses_with_exception = licensing.license_symbols(
                license.strip(), decompose=False
            )
            for l in parsed_licenses_with_exception:
                if isinstance(l, license_expression.LicenseWithExceptionSymbol):
                    parsed_licenses.append(l.license_symbol.key)
                    parsed_exceptions.append(l.exception_symbol.key)
                else:
                    parsed_licenses.append(l.key)
        except license_expression.ExpressionError:
            parsed_licenses = [license]
    
        licenseref_regex = re.compile(r"^LicenseRef[a-zA-Z0-9\-.]*$")
        filtered_licenses = []
        for license in parsed_licenses:
            if not licenseref_regex.match(license):
                filtered_licenses.append(license)
    
&gt;       with open(
            os.path.join(os.path.dirname(__file__), LICENSES_PATH), "r"
        ) as f:
E       FileNotFoundError: [Errno 2] No such file or directory: '/Users/arim./codebase/anaconda-tools/conda-lint/conda_lint/linters/data/licenses.txt'

conda_lint/linters/SBOM_linter.py:80: FileNotFoundError</failure></testcase><testcase classname="tests.test_licenses" name="test_dirty_lint_license[tests/bad-feedstock-meta.yaml]" time="0.014"><failure message="FileNotFoundError: [Errno 2] No such file or directory: '/Users/arim./codebase/anaconda-tools/conda-lint/conda_lint/linters/data/licenses.txt'">bad_metafile = 'tests/bad-feedstock-meta.yaml'

    @pytest.mark.parametrize("bad_metafile", [
        "tests/bad-feedstock-meta.yaml",
        ])
    def test_dirty_lint_license(bad_metafile):
        s = SBOMLinter()
&gt;       result = s.lint_license(bad_metafile)

tests/test_licenses.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = SBOMLinter(prog='pytest', usage=None, description='a linter to validate SPDX license standards', formatter_class=&lt;class 'argparse.HelpFormatter'&gt;, conflict_handler='error', add_help=True)
metafile = 'tests/bad-feedstock-meta.yaml'

    def lint_license(self, metafile):
        lints = []
        # Before linting a license, remove jinja from the text if there is any.
        jlint = JinjaLinter()
        args = jlint.parse_args(["-f", f"{metafile}", "--return_yaml"])
    
        jlints, jinja_check = jlint.lint(args)
        lints.extend(jlints)
        meta = jinja_check
    
        about_section = meta.get("about")
        license = about_section.get("license", "")
        license_line = find_location(metafile, "license", license)
        licensing = license_expression.Licensing()
        parsed_exceptions = []
        prelint = f"{metafile}: line {license_line}: "
        try:
            parsed_licenses = []
            parsed_licenses_with_exception = licensing.license_symbols(
                license.strip(), decompose=False
            )
            for l in parsed_licenses_with_exception:
                if isinstance(l, license_expression.LicenseWithExceptionSymbol):
                    parsed_licenses.append(l.license_symbol.key)
                    parsed_exceptions.append(l.exception_symbol.key)
                else:
                    parsed_licenses.append(l.key)
        except license_expression.ExpressionError:
            parsed_licenses = [license]
    
        licenseref_regex = re.compile(r"^LicenseRef[a-zA-Z0-9\-.]*$")
        filtered_licenses = []
        for license in parsed_licenses:
            if not licenseref_regex.match(license):
                filtered_licenses.append(license)
    
&gt;       with open(
            os.path.join(os.path.dirname(__file__), LICENSES_PATH), "r"
        ) as f:
E       FileNotFoundError: [Errno 2] No such file or directory: '/Users/arim./codebase/anaconda-tools/conda-lint/conda_lint/linters/data/licenses.txt'

conda_lint/linters/SBOM_linter.py:80: FileNotFoundError</failure></testcase><testcase classname="tests.test_licenses" name="test_bad_path_lint_license[numpy-meta.yaml]" time="0.001" /><testcase classname="tests.test_licenses" name="test_bad_path_lint_license[]" time="0.001" /></testsuite></testsuites>